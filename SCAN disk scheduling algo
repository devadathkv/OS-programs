#include <stdio.h>
#include <stdlib.h>

int main() {
    int RQ[10], n, totaldsize,i;
    int totalheadmovt = 0, initial, move;

    printf("Enter number of requests: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        printf("Enter request sequence: ");
        scanf("%d", &RQ[i]);
    }

    printf("Enter initial head position: ");
    scanf("%d", &initial);
    printf("Enter total disk size: ");
    scanf("%d", &totaldsize);
    printf("Enter direction (1 for high, 0 for low): ");
    scanf("%d", &move);

    // Sort the request queue
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (RQ[j] > RQ[j+1]) {
                int temp = RQ[j];
                RQ[j] = RQ[j+1];
                RQ[j+1] = temp;
            }
        }
    }

    int hindex = -1;
    // Find the index where the initial head position should be placed
    for (int i = 0; i < n; i++) {
        if (initial < RQ[i]) {
            hindex = i;
            break;
        }
    }
    //if (hindex == -1) hindex = n;

    if (move == 0) { // Low direction
        for (int i = hindex - 1; i >= 0; i--) {
            totalheadmovt = totalheadmovt+ abs(RQ[i] - initial);
            initial = RQ[i];
        }
        totalheadmovt = totalheadmovt+ abs(RQ[i+1] - 0);
        initial = 0;
        for (int i = hindex; i < n; i++) {
            totalheadmovt = totalheadmovt +abs(RQ[i] - initial);
            initial = RQ[i];
        }
    } 
    else { // High direction
        for (int i = hindex; i < n; i++) {
            totalheadmovt = totalheadmovt+ abs(RQ[i] - initial);
            initial = RQ[i];
        }
        totalheadmovt = totalheadmovt+ abs(totaldsize - RQ[i-1] -1);
        initial = totaldsize - 1;
        for (int i = hindex - 1; i >= 0; i--) {
            totalheadmovt=totalheadmovt + abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }

    printf("Total head movement: %d\n", totalheadmovt);

    return 0;
}

